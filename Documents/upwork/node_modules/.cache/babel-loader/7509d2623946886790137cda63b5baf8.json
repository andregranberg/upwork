{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/andrey/Documents/React/17.victory/src/chart1.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport RangeSlider from \"./component/RangeSlider\";\nimport Histogram from \"./component/Histogram\";\nimport RangeInput from \"./component/RangeInput\";\nconst LIGHT_GREY = \"hsl(355, 20%, 90%)\";\nconst PRIMARY_COLOR = \"hsl(355, 92%, 67%)\";\nconst Container = styled.div``;\n_c = Container;\nconst Card = styled.div`\n  background-color: #2b2a31;\n  padding: 40px 36px 30px;\n  border-radius: 5px;\n\n  // when rendered in the gallery preview\n  a & {\n    padding: 24px 20px 10px;\n  }\n`;\n_c2 = Card;\n\nconst yearToSeason = year => `${year}-${(year + 1 + \"\").slice(2, 4)}`;\n\nconst YEARS = Object.keys(basketballData).map(_c3 = year => parseInt(year, 10));\n_c4 = YEARS;\nconst FIRST_YEAR = YEARS[0];\nconst LAST_YEAR = YEARS[YEARS.length - 1];\nconst TOTAL_YEARS = LAST_YEAR - FIRST_YEAR;\n\nconst getTooltipText = ({\n  datum\n}) => {\n  const {\n    binnedData,\n    x0,\n    x1\n  } = datum;\n  const playerCount = binnedData.length;\n\n  if (!playerCount) {\n    return null;\n  }\n\n  const playerNames = binnedData.slice(0, 2).map(({\n    player\n  }) => {\n    const [firstName, lastName] = player.split(\" \");\n    return lastName ? `${firstName.slice(0, 1)}. ${lastName}` : firstName;\n  }).join(\", \");\n  const playerNamesList = `\\n (${playerNames}${playerCount > 2 ? `, and ${playerCount - 2} more players` : \"\"})`;\n  return `${playerCount} player${playerCount === 1 ? \"\" : \"s\"} averaged between ${x0}-${x1} 3PT attempts ${playerNamesList}`;\n};\n\nconst sharedAxisStyles = {\n  axis: {\n    stroke: \"transparent\"\n  },\n  tickLabels: {\n    fill: LIGHT_GREY,\n    fontSize: 14\n  },\n  axisLabel: {\n    fill: LIGHT_GREY,\n    padding: 36,\n    fontSize: 15,\n    fontStyle: \"italic\"\n  }\n};\nconst GradientSvg = styled.svg`\n  position: fixed;\n  opacity: 0;\n`;\n_c5 = GradientSvg;\n\nconst App = () => {\n  _s();\n\n  const [year, setYear] = React.useState(FIRST_YEAR);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(GradientSvg, {\n      children: /*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n          id: \"gradient1\",\n          x1: \"0%\",\n          y1: \"0%\",\n          x2: \"50%\",\n          y2: \"100%\",\n          children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n            offset: \"0%\",\n            stopColor: \"#FFE29F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n            offset: \"40%\",\n            stopColor: \"#FFA99F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n            offset: \"100%\",\n            stopColor: PRIMARY_COLOR\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(VictoryChart, {\n        containerComponent: /*#__PURE__*/_jsxDEV(VictoryVoronoiContainer, {\n          labels: getTooltipText,\n          voronoiDimension: \"x\",\n          labelComponent: /*#__PURE__*/_jsxDEV(VictoryTooltip, {\n            constrainToVisibleArea: true,\n            style: {\n              fill: LIGHT_GREY,\n              fontSize: 11\n            },\n            flyoutStyle: {\n              fill: \"#24232a\",\n              stroke: PRIMARY_COLOR,\n              strokeWidth: 0.5\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this),\n        height: 280,\n        children: [/*#__PURE__*/_jsxDEV(VictoryLabel, {\n          text: `3pt Attempts Per Game Averages (${yearToSeason(year)})`,\n          x: 225,\n          y: 18,\n          textAnchor: \"middle\",\n          style: {\n            fill: LIGHT_GREY,\n            fontSize: 16\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(VictoryAxis, {\n          style: { ...sharedAxisStyles,\n            grid: {\n              fill: LIGHT_GREY,\n              stroke: LIGHT_GREY,\n              pointerEvents: \"painted\",\n              strokeWidth: 0.5\n            }\n          },\n          label: \"# of players\",\n          dependentAxis: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(VictoryAxis, {\n          style: { ...sharedAxisStyles,\n            axisLabel: { ...sharedAxisStyles.axisLabel,\n              padding: 35\n            }\n          },\n          label: \"3pt attempts per game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(VictoryHistogram, {\n          cornerRadius: 2,\n          domain: {\n            y: [0, 125]\n          },\n          animate: {\n            duration: 300\n          },\n          data: basketballData[year],\n          bins: _.range(0, 16, 2),\n          style: {\n            data: {\n              stroke: \"transparent\",\n              fill: \"url(#gradient1)\",\n              strokeWidth: 1\n            },\n            labels: {\n              fill: \"red\"\n            }\n          },\n          x: \"3pa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YearSlider, {\n        year: year,\n        setYear: setYear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"TzL+Vb/qrAv+CIzXDOKl2eSSM8g=\");\n\n_c6 = App;\nconst SliderContainer = styled.div`\n  padding: 64px 25px 10px;\n\n  // when rendered in the gallery preview\n  a & {\n    padding: 24px 36px 0px;\n  }\n`;\n_c7 = SliderContainer;\n\nconst getYear = percent => Math.round(FIRST_YEAR + TOTAL_YEARS * (percent / 100));\n\nconst SEASONS = YEARS.map(_c8 = year => yearToSeason(year));\n_c9 = SEASONS;\n\nconst YearSlider = ({\n  year,\n  setYear\n}) => {\n  _s2();\n\n  const [value, setValue] = React.useState(0);\n  return /*#__PURE__*/_jsxDEV(SliderContainer, {\n    children: /*#__PURE__*/_jsxDEV(Slider, {\n      onChange: newValue => {\n        setValue(newValue);\n        const calculatedYear = getYear(newValue);\n\n        if (year !== calculatedYear) {\n          setYear(calculatedYear);\n        }\n      },\n      color: PRIMARY_COLOR,\n      value: value,\n      maxValue: 100,\n      tooltipValues: SEASONS\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(YearSlider, \"qPBOvRc2Co1iWTsdTL0g7j/rpjU=\");\n\n_c10 = YearSlider;\nexport default function sliderApp() {\n  return /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 10\n  }, this);\n}\n;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Card\");\n$RefreshReg$(_c3, \"YEARS$Object.keys(basketballData).map\");\n$RefreshReg$(_c4, \"YEARS\");\n$RefreshReg$(_c5, \"GradientSvg\");\n$RefreshReg$(_c6, \"App\");\n$RefreshReg$(_c7, \"SliderContainer\");\n$RefreshReg$(_c8, \"SEASONS$YEARS.map\");\n$RefreshReg$(_c9, \"SEASONS\");\n$RefreshReg$(_c10, \"YearSlider\");","map":{"version":3,"sources":["/home/andrey/Documents/React/17.victory/src/chart1.js"],"names":["React","useState","useEffect","ReactDOM","RangeSlider","Histogram","RangeInput","LIGHT_GREY","PRIMARY_COLOR","Container","styled","div","Card","yearToSeason","year","slice","YEARS","Object","keys","basketballData","map","parseInt","FIRST_YEAR","LAST_YEAR","length","TOTAL_YEARS","getTooltipText","datum","binnedData","x0","x1","playerCount","playerNames","player","firstName","lastName","split","join","playerNamesList","sharedAxisStyles","axis","stroke","tickLabels","fill","fontSize","axisLabel","padding","fontStyle","GradientSvg","svg","App","setYear","strokeWidth","grid","pointerEvents","y","duration","_","range","data","labels","SliderContainer","getYear","percent","Math","round","SEASONS","YearSlider","value","setValue","newValue","calculatedYear","sliderApp"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport RangeSlider from \"./component/RangeSlider\";\nimport Histogram from \"./component/Histogram\";\nimport RangeInput from \"./component/RangeInput\";\n\nconst LIGHT_GREY = \"hsl(355, 20%, 90%)\";\nconst PRIMARY_COLOR = \"hsl(355, 92%, 67%)\";\nconst Container = styled.div``;\n\nconst Card = styled.div`\n  background-color: #2b2a31;\n  padding: 40px 36px 30px;\n  border-radius: 5px;\n\n  // when rendered in the gallery preview\n  a & {\n    padding: 24px 20px 10px;\n  }\n`;\n\nconst yearToSeason = year => `${year}-${(year + 1 + \"\").slice(2, 4)}`;\n\nconst YEARS = Object.keys(basketballData).map(year => parseInt(year, 10));\nconst FIRST_YEAR = YEARS[0];\nconst LAST_YEAR = YEARS[YEARS.length - 1];\nconst TOTAL_YEARS = LAST_YEAR - FIRST_YEAR;\n\nconst getTooltipText = ({ datum }) => {\n  const { binnedData, x0, x1 } = datum;\n\n  const playerCount = binnedData.length;\n\n  if (!playerCount) {\n    return null;\n  }\n\n  const playerNames = binnedData\n    .slice(0, 2)\n    .map(({ player }) => {\n      const [firstName, lastName] = player.split(\" \");\n      return lastName ? `${firstName.slice(0, 1)}. ${lastName}` : firstName;\n    })\n    .join(\", \");\n\n  const playerNamesList = `\\n (${playerNames}${\n    playerCount > 2 ? `, and ${playerCount - 2} more players` : \"\"\n  })`;\n\n  return `${playerCount} player${\n    playerCount === 1 ? \"\" : \"s\"\n  } averaged between ${x0}-${x1} 3PT attempts ${playerNamesList}`;\n};\n\nconst sharedAxisStyles = {\n  axis: {\n    stroke: \"transparent\"\n  },\n  tickLabels: {\n    fill: LIGHT_GREY,\n    fontSize: 14\n  },\n  axisLabel: {\n    fill: LIGHT_GREY,\n    padding: 36,\n    fontSize: 15,\n    fontStyle: \"italic\"\n  }\n};\n\nconst GradientSvg = styled.svg`\n  position: fixed;\n  opacity: 0;\n`;\n\nconst App = () => {\n  const [year, setYear] = React.useState(FIRST_YEAR);\n\n  return (\n    <Container>\n      <GradientSvg>\n        <defs>\n          <linearGradient id=\"gradient1\" x1=\"0%\" y1=\"0%\" x2=\"50%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#FFE29F\" />\n            <stop offset=\"40%\" stopColor=\"#FFA99F\" />\n            <stop offset=\"100%\" stopColor={PRIMARY_COLOR} />\n          </linearGradient>\n        </defs>\n      </GradientSvg>\n\n      <Card>\n        <VictoryChart\n          containerComponent={\n            <VictoryVoronoiContainer\n              labels={getTooltipText}\n              voronoiDimension=\"x\"\n              labelComponent={\n                <VictoryTooltip\n                  constrainToVisibleArea\n                  style={{\n                    fill: LIGHT_GREY,\n                    fontSize: 11\n                  }}\n                  flyoutStyle={{\n                    fill: \"#24232a\",\n                    stroke: PRIMARY_COLOR,\n                    strokeWidth: 0.5\n                  }}\n                />\n              }\n            />\n          }\n          height={280}\n        >\n          <VictoryLabel\n            text={`3pt Attempts Per Game Averages (${yearToSeason(year)})`}\n            x={225}\n            y={18}\n            textAnchor=\"middle\"\n            style={{ fill: LIGHT_GREY, fontSize: 16 }}\n          />\n          <VictoryAxis\n            style={{\n              ...sharedAxisStyles,\n              grid: {\n                fill: LIGHT_GREY,\n                stroke: LIGHT_GREY,\n                pointerEvents: \"painted\",\n                strokeWidth: 0.5\n              }\n            }}\n            label=\"# of players\"\n            dependentAxis\n          />\n          <VictoryAxis\n            style={{\n              ...sharedAxisStyles,\n              axisLabel: { ...sharedAxisStyles.axisLabel, padding: 35 }\n            }}\n            label=\"3pt attempts per game\"\n          />\n          <VictoryHistogram\n            cornerRadius={2}\n            domain={{ y: [0, 125] }}\n            animate={{ duration: 300 }}\n            data={basketballData[year]}\n            bins={_.range(0, 16, 2)}\n            style={{\n              data: {\n                stroke: \"transparent\",\n                fill: \"url(#gradient1)\",\n                strokeWidth: 1,\n              },\n              labels: {\n                fill: \"red\"\n              }\n            }}\n            x=\"3pa\"\n          />\n        </VictoryChart>\n\n        <YearSlider year={year} setYear={setYear} />\n      </Card>\n    </Container>\n  );\n};\n\nconst SliderContainer = styled.div`\n  padding: 64px 25px 10px;\n\n  // when rendered in the gallery preview\n  a & {\n    padding: 24px 36px 0px;\n  }\n`;\n\nconst getYear = percent =>\n  Math.round(FIRST_YEAR + TOTAL_YEARS * (percent / 100));\n\nconst SEASONS = YEARS.map(year => yearToSeason(year));\n\nconst YearSlider = ({ year, setYear }) => {\n  const [value, setValue] = React.useState(0);\n\n  return (\n    <SliderContainer>\n      <Slider\n        onChange={newValue => {\n          setValue(newValue);\n          const calculatedYear = getYear(newValue);\n\n          if (year !== calculatedYear) {\n            setYear(calculatedYear);\n          }\n        }}\n        color={PRIMARY_COLOR}\n        value={value}\n        maxValue={100}\n        tooltipValues={SEASONS}\n      />\n    </SliderContainer>\n  );\n};\n\nexport default function sliderApp() {\n  return <App/>;\n};\n"]},"metadata":{},"sourceType":"module"}